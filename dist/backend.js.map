{"version":3,"sources":["webpack://backend/webpack/bootstrap","webpack://backend/./backend/src/main.js","webpack://backend/./backend/src/config/config.js","webpack://backend/./backend/src/config/locales.js","webpack://backend/./backend/src/config/locale/zh-cn.js","webpack://backend/./backend/src/config/errors.js","webpack://backend/./backend/src/config/middlewares.js","webpack://backend/./backend/src/routes.js","webpack://backend/./backend/src/controller/version.js","webpack://backend/./backend/src/controller/todo.js","webpack://backend/./backend/src/services.js","webpack://backend/./backend/src/service/version.js","webpack://backend/./backend/src/service/todo.js","webpack://backend/./backend/src/models.js","webpack://backend/./backend/src/model/todo.js","webpack://backend/./backend/src/meta.js","webpack://backend/./backend/src/config/validation/schemas.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;AClFA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC3BA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;AACA;AACA;;;;;;;ACFA;AACA;;;;;;;ACDA;AACA;;AAEA;AACA;AACA;AACA,KAAK,oFAAoF;AACzF,KAAK,kFAAkF;AACvF,KAAK,iFAAiF;AACtF;AACA,KAAK,8EAA8E;AACnF,KAAK,4EAA4E;AACjF,KAAK,8EAA8E;AACnF,KAAK,6EAA6E;AAClF,KAAK,8EAA8E;AACnF,KAAK,8EAA8E;AACnF,KAAK,8EAA8E;AACnF;AACA;AACA;;;;;;;ACnBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;ACpBA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;ACzCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACTA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,0EAA0E,4BAA4B;AACtG;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA,WAAW,8CAA8C;AACzD,WAAW,4DAA4D;AACvE,WAAW,6DAA6D;AACxE,WAAW,yEAAyE;AACpF,WAAW,sEAAsE;AACjF,WAAW,uEAAuE;AAClF;AACA;AACA,6DAA6D,wBAAwB;AACrF;AACA;AACA,qDAAqD,+BAA+B;AACpF;AACA;AACA;AACA;AACA,WAAW;AACX,4DAA4D,iCAAiC;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS,8CAA8C;AACvD,SAAS,4CAA4C;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,mDAAmD,0BAA0B;AAC7E;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;;;;;;ACtGA;;AAEA;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA,OAAO;AACP,cAAc;AACd;;AAEA,gBAAgB,6BAA6B;AAC7C;AACA;;AAEA,kBAAkB,kCAAkC;AACpD;AACA;;AAEA,iBAAiB,yCAAyC;AAC1D;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,kBAAkB,uBAAuB;AACzC;AACA;AACA;AACA,OAAO;AACP;;AAEA,kBAAkB,+BAA+B;AACjD;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA,SAAS;AACT;AACA;;AAEA,kBAAkB,6BAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;;;;;;;AC5DA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA,kBAAkB,8BAA8B,wBAAwB,EAAE;AAC1E;AACA;AACA;AACA;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,OAAO;AACP,kBAAkB;AAClB;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA","file":"backend.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","const config = require('./config/config.js');\nconst locales = require('./config/locales.js');\nconst errors = require('./config/errors.js');\nconst middlewares = require('./config/middlewares.js');\n\nmodule.exports = app => {\n\n  // routes\n  const routes = require('./routes.js')(app);\n  // services\n  const services = require('./services.js')(app);\n  // models\n  const models = require('./models.js')(app);\n  // meta\n  const meta = require('./meta.js')(app);\n\n  return {\n    routes,\n    services,\n    models,\n    config,\n    locales,\n    errors,\n    middlewares,\n    meta,\n  };\n\n};\n","// eslint-disable-next-line\nmodule.exports = appInfo => {\n  const config = {};\n  return config;\n};\n","module.exports = {\n  'zh-cn': require('./locale/zh-cn.js'),\n};\n","module.exports = {\n  Todo: '待办',\n  Review: '评审',\n  Reviewing: '评审中',\n  Reviewed: '已评审',\n  'Create Todo': '新建待办',\n  'Todo List': '待办清单',\n  'What to do': '要做什么',\n  Completed: '已完成',\n};\n","// error code should start from 1001\nmodule.exports = {\n};\n","module.exports = {\n};\n","const version = require('./controller/version.js');\nconst todo = require('./controller/todo.js');\n\nmodule.exports = app => {\n  const routes = [\n    // version\n    { method: 'post', path: 'version/update', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/init', controller: version, middlewares: 'inner' },\n    { method: 'post', path: 'version/test', controller: version, middlewares: 'test' },\n    // todo\n    { method: 'post', path: 'todo/create', controller: todo, middlewares: 'inner' },\n    { method: 'post', path: 'todo/read', controller: todo, middlewares: 'inner' },\n    { method: 'post', path: 'todo/select', controller: todo, middlewares: 'inner' },\n    { method: 'post', path: 'todo/write', controller: todo, middlewares: 'inner' },\n    { method: 'post', path: 'todo/delete', controller: todo, middlewares: 'inner' },\n    { method: 'post', path: 'todo/action', controller: todo, middlewares: 'inner' },\n    { method: 'post', path: 'todo/enable', controller: todo, middlewares: 'inner' },\n  ];\n  return routes;\n};\n","module.exports = app => {\n  class VersionController extends app.Controller {\n\n    async update() {\n      await this.service.version.update(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async init() {\n      await this.service.version.init(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async test() {\n      await this.service.version.test(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n  }\n  return VersionController;\n};\n","module.exports = app => {\n\n  class TodoController extends app.Controller {\n\n    async create() {\n      const res = await this.ctx.service.todo.create(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async read() {\n      const res = await this.ctx.service.todo.read(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async select() {\n      const res = await this.ctx.service.todo.select(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async write() {\n      await this.ctx.service.todo.write(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async delete() {\n      await this.ctx.service.todo.delete(this.ctx.request.body);\n      this.ctx.success();\n    }\n\n    async action() {\n      const res = await this.ctx.service.todo.action(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n    async enable() {\n      const res = await this.ctx.service.todo.enable(this.ctx.request.body);\n      this.ctx.success(res);\n    }\n\n  }\n  return TodoController;\n};\n\n","const version = require('./service/version.js');\nconst todo = require('./service/todo.js');\n\nmodule.exports = app => {\n  const services = {\n    version,\n    todo,\n  };\n  return services;\n};\n","module.exports = app => {\n\n  class Version extends app.Service {\n\n    async update(options) {\n      if (options.version === 1) {\n        // create table: testTodo\n        const sql = `\n          CREATE TABLE testTodo (\n            id int(11) NOT NULL AUTO_INCREMENT,\n            createdAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\n            updatedAt timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n            deleted int(11) DEFAULT '0',\n            iid int(11) DEFAULT '0',\n            atomId int(11) DEFAULT '0',\n            completed int(11) DEFAULT '0',\n            PRIMARY KEY (id)\n          )\n        `;\n        await this.ctx.model.query(sql);\n      }\n    }\n\n    async init(options) {\n      if (options.version === 1) {\n        // create role: reviewer\n        const roleAuthenticated = await this.ctx.meta.role.getSystemRole({ roleName: 'authenticated' });\n        await this.ctx.meta.role.add({\n          roleName: 'reviewer',\n          roleIdParent: roleAuthenticated.id,\n        });\n        await this.ctx.meta.role.build();\n\n        // add role rights\n        const roleRights = [\n          { roleName: 'authenticated', action: 'create' },\n          { roleName: 'authenticated', action: 'write', scopeNames: 0 },\n          { roleName: 'authenticated', action: 'delete', scopeNames: 0 },\n          { roleName: 'authenticated', action: 'read', scopeNames: 'authenticated' },\n          { roleName: 'reviewer', action: 'review', scopeNames: 'authenticated' },\n          { roleName: 'superuser', action: 'review', scopeNames: 'authenticated' },\n        ];\n        const module = this.ctx.app.meta.modules[this.ctx.module.info.relativeName];\n        const atomClass = await this.ctx.meta.atomClass.get({ atomClassName: 'todo' });\n        for (const roleRight of roleRights) {\n        // role\n          const role = await this.ctx.meta.role.get({ roleName: roleRight.roleName });\n          // scope\n          let scope;\n          if (!roleRight.scopeNames) {\n            scope = 0;\n          } else {\n            const roleScope = await this.ctx.meta.role.get({ roleName: roleRight.scopeNames });\n            scope = [ roleScope.id ];\n          }\n          // add role right\n          await this.ctx.meta.role.addRoleRight({\n            roleId: role.id,\n            atomClassId: atomClass.id,\n            action: this.ctx.constant.module('a-base').atom.action[roleRight.action] || module.main.meta.base.atoms.todo\n              .actions[roleRight.action].code,\n            scope,\n          });\n        }\n      }\n    }\n\n    async test() {\n      // create test users: demo001,demo002\n      const users = [\n        { userName: 'demo001', roleName: 'registered' },\n        { userName: 'demo002', roleName: 'reviewer' },\n      ];\n      const userIds = [];\n      for (const user of users) {\n        // add user\n        userIds[user.userName] = await this.ctx.meta.user.add({\n          userName: user.userName,\n          realName: user.userName,\n        });\n        // add auth info for login\n        await this.ctx.performAction({\n          method: 'post',\n          url: '/a/authsimple/auth/add',\n          body: {\n            userId: userIds[user.userName],\n            password: '123456',\n          },\n        });\n        // role\n        const role = await this.ctx.meta.role.get({ roleName: user.roleName });\n        // add user role\n        await this.ctx.meta.role.addUserRole({\n          userId: userIds[user.userName],\n          roleId: role.id,\n        });\n      }\n    }\n\n  }\n\n  return Version;\n};\n","module.exports = app => {\n\n  class Todo extends app.Service {\n\n    async create({ atomClass, key, atom, user }) {\n      // add todo\n      const res = await this.ctx.model.todo.insert({\n        atomId: key.atomId,\n      });\n      return { atomId: key.atomId, itemId: res.insertId };\n    }\n\n    async read({ atomClass, key, item, user }) {\n      // read\n    }\n\n    async select({ atomClass, options, items, user }) {\n      // select\n    }\n\n    async write({ atomClass, key, item, validation, user }) {\n      // update todo\n      await this.ctx.model.todo.update({\n        id: key.itemId,\n        completed: item.completed,\n      });\n    }\n\n    async delete({ atomClass, key, user }) {\n      // delete todo\n      await this.ctx.model.todo.delete({\n        id: key.itemId,\n      });\n    }\n\n    async action({ action, atomClass, key, user }) {\n      if (action === 101) {\n        // change flag\n        await this.ctx.meta.atom.flag({\n          key,\n          atom: { atomFlag: 2 },\n          user,\n        });\n      }\n    }\n\n    async enable({ atomClass, key, atom, user }) {\n      // enable\n      const atomFlag = atom.atomEnabled ? 1 : 0;\n      // change flag\n      await this.ctx.meta.atom.flag({\n        key,\n        atom: { atomFlag },\n        user,\n      });\n    }\n\n  }\n\n  return Todo;\n};\n","const todo = require('./model/todo.js');\n\nmodule.exports = app => {\n  const models = {\n    todo,\n  };\n  return models;\n};\n","module.exports = app => {\n  class Todo extends app.meta.Model {\n    constructor(ctx) {\n      super(ctx, { table: 'testTodo', options: { disableDeleted: false } });\n    }\n  }\n  return Todo;\n};\n","module.exports = app => {\n  const schemas = require('./config/validation/schemas.js')(app);\n  const meta = {\n    base: {\n      atoms: {\n        todo: {\n          info: {\n            title: 'Todo',\n            tableName: 'testTodo',\n          },\n          actions: {\n            review: {\n              code: 101,\n              title: 'Review',\n              flag: '1',\n            },\n          },\n          flags: {\n            1: {\n              title: 'Reviewing',\n            },\n            2: {\n              title: 'Reviewed',\n            },\n          },\n          validator: 'todo',\n          search: {\n            validator: 'todoSearch',\n          },\n        },\n      },\n      functions: {\n        createTodo: {\n          title: 'Create Todo',\n          scene: 'create',\n          autoRight: 1,\n          atomClassName: 'todo',\n          action: 'create',\n          sorting: 1,\n          menu: 1,\n        },\n        listTodo: {\n          title: 'Todo List',\n          scene: 'list',\n          autoRight: 1,\n          atomClassName: 'todo',\n          action: 'read',\n          sorting: 1,\n          menu: 1,\n        },\n      },\n    },\n    validation: {\n      validators: {\n        todo: {\n          schemas: 'todo',\n        },\n        todoSearch: {\n          schemas: 'todoSearch',\n        },\n      },\n      keywords: {},\n      schemas: {\n        todo: schemas.todo,\n        todoSearch: schemas.todoSearch,\n      },\n    },\n  };\n  return meta;\n};\n","module.exports = app => {\n  const schemas = {};\n  // todo\n  schemas.todo = {\n    type: 'object',\n    properties: {\n      atomName: {\n        type: 'string',\n        ebType: 'text',\n        ebTitle: 'What to do',\n        notEmpty: true,\n      },\n      completed: {\n        type: 'number',\n        ebType: 'toggle',\n        ebTitle: 'Completed',\n      },\n    },\n  };\n  // todo search\n  schemas.todoSearch = {\n    type: 'object',\n    properties: {\n      completed: {\n        type: 'number',\n        ebType: 'toggle',\n        ebTitle: 'Completed',\n      },\n    },\n  };\n  return schemas;\n};\n"],"sourceRoot":""}